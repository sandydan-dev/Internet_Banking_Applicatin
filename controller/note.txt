I have created 2 services 1st is user role base authentication like customer, employee, admin, and 2nd services is internet banking application in the 2nd services i have created model like BankBranch model, Customer Profile model, Account Opening Form model, Bank Account model which generate account number for customer, now i want after generating account number for customer which model I can  create to transfer money to customer to customer, but first Customer need to deposite money then customer can available to transfer money to another account so can you guide me how to create this model, but customer need to deposite first then customer can transfer to another account number do you understand what I trying to say you?


# BANK BRANCH CONTROLLER DATA
# endpoint : http://localhost:4002/api/v1/branch/create_branch_data
# Push dummy data

  {
    "branchName": "Central Bank Nagpur",
    "address": "123 Sitabuldi Road",
    "city": "Nagpur",
    "state": "Maharashtra",
    "zipCode": "440012",
    "phoneNumber": "+91-7121234567",
    "email": "central.nagpur@bank.com",
    "branchManager": "Ramesh Kulkarni",
    "atmAvailability": 15
  }
  
///////////////////////////////////////////////////////////////////////

# CUSTOMER PROFILE CREATING THERE OWN PAGE
# endpoint : http://localhost:4002/api/v1/customer_profile/create_profile
# PUSH DUMMY DATA
{
    "fullName": "Arjun Patel",
    "email": "arjun.patel@example.com",
    "phoneNumber": "+91-9876543210",
    "address": "101 Green Park, Mumbai, Maharashtra, India"
  }

//////////////////////////////////////////////////////////////////////

# ACCOUNT OPENING FORM 
# endpoint : http://localhost:4002/api/v1/account_form/account_open_form
# PUSH DUMMY DATA
{
    "branchId": "67f1098c51c1b4795aa97676",
    "fullName": "Anjali Deshmukh",
    "dateOfBirth": "1985-03-20",
    "phoneNumber": "+91-712-9876543",
    "email": "anjali.deshmukh@example.com",
    "gender": "Female",
    "street": "456 Civil Lines",
    "city": "Nagpur",
    "state": "Maharashtra",
    "zipcode": "440001",
    "identityProof": "Pan Card",
    "addressProof": "Rental Agreement",
    "occupation": "Doctor",
    "incomeRange": "₹10,00,000 - ₹15,00,000"
}

# GENERATE ACCOUNT NUMBER FOR CUSTOMER
# endpoint : http://localhost:4002/api/v1/bank_account/create_bank_account
# PUSH DUMMY DATA
{
    "accountHolderId": "67f174d6b67ba8a144eb9e4c", // account holder opening form
    "status": "active"
}


# DEPOSIT AMOUNT TO ACCOUNT NUMBER
# endpoint : http://localhost:4002/api/v1/transaction/deposit

{
    "accountNumber": "78640721583",
    "amount": 5000,
    "remarks": "Initial deposit for savings account"
}


# TRANSFER MONEY BETWEEN ACCOUNT TO ACCOUNT
# endpoint : http://localhost:4002/api/v1/transaction/tranfer_money

{
  "senderAccountNumber": "78640721583",
  "receiverAccountNumber": "78612345678",
  "amount": 2000,
  "remarks": "Payment for services"
}


# GENERATE CARN NUMBER FOR CUSTOMER
# endpoint : http://localhost:4002/api/v1/card_transaction/activate_card/78640721583
{
    "cardType": "debit",
    "status": "active"
}



// MODELS TO CREATE
Loan Model
A model to manage loan accounts, including loan types, interest rates, repayment schedules, and statuses.
Fields: loanId, customerId, loanType, loanAmount, interestRate, repaymentSchedule, status, remarks.

Card Model
A model to manage debit/credit cards issued to customers.
Fields: cardId, customerId, cardType (debit/credit), cardNumber, expiryDate, cvv, status.

Fixed Deposit Model
A model to manage fixed deposit accounts.
Fields: fdId, customerId, depositAmount, interestRate, maturityDate, status.

Recurring Deposit Model
A model to manage recurring deposit accounts.
Fields: rdId, customerId, monthlyDepositAmount, interestRate, maturityDate, status.

Beneficiary Model
A model to manage beneficiaries for fund transfers.
Fields: beneficiaryId, customerId, beneficiaryName, accountNumber, bankName, ifscCode, status.

Transaction History Model
A model to store detailed transaction logs for auditing purposes.
Fields: transactionId, accountId, transactionType, amount, date, status, remarks.

Notification Model
A model to manage notifications sent to customers (e.g., transaction alerts, account updates).
Fields: notificationId, customerId, message, type, status, timestamp.

Audit Log Model
A model to track changes and actions performed by users or employees for compliance purposes.
Fields: logId, userId, action, timestamp, details.

Insurance Model
A model to manage insurance policies linked to customer accounts.
Fields: policyId, customerId, policyType, premiumAmount, coverageAmount, status.

Investment Model
A model to manage customer investments in mutual funds, stocks, etc.
Fields: investmentId, customerId, investmentType, amount, returns, status.